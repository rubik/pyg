'''
Create Packs, like Zicbee Pack (at http://pypi.python.org/zicbee).
Inspired by zicbee-workshop's manage.py
'''

import os
import sys
import glob
import shutil
import platform

from pyg.log import logger
from pyg.req import Requirement
from pyg.web import highest_version
from pyg.inst import Bundler
from pyg.utils import TempDir, ZipFile


RUN_PY = '''#!/usr/bin/env python
## Executable file auto-generated by Pyg

import os
import sys
import re

# For now this is "safe", should be improved with time
p_re = re.compile('.*(\.egg|python\d+[.\d]+[^/]*|lib-\w+|plat-\w+)$')
egg_name = {0!r}

exists = os.path.exists
j = os.path.join
paths = [os.getcwd()] + sys.path

my_dir = [p for p in paths if exists(j(p, egg_name))]
if not(my_dir):
    print "Unable to find {0!r} file !"
    raise SystemExit()

sys.path = [os.path.join(my_dir[0], egg_name)] + [x for x in sys.path if p_re.match(x)]

import {1}
sys.exit({1}.{2}())
'''

## Now it is still a placeholder
def _gen_executable(eggname, code):
    import_tok, func = code.split(':')
    return RUN_PY.format(eggname, import_tok, func)


class Packer(object):

    EMPTY, INI, CAT, SCAT, MERGE = range(5)
    REQ = 42

    EGG_FILES = {
        'dependency_links.txt': MERGE,
        'entry_points.txt': INI,
        'not-zip-safe': EMPTY,
        'PKG-INFO': REQ,
        'requires.txt': EMPTY,
        'SOURCES.txt': SCAT,
        'top_level.txt': SCAT,
        'spec/depend': """metadata_version = '1.1'
name = {req!r}
version = {req_version!r}
build = 1

arch = {arch}
platform = {platform!r}
osdist = None
python = {python_version!r}
packages = [
  {packages}
]
            """
    }

    def __init__(self, req, bundle_name, dest=None):
        self.req = req
        self.bundle_name = bundle_name
        self.pack_name = bundle_name
        if not self.pack_name.endswith('.zip'):
            self.pack_name = self.pack_name + '.zip'
        self.dest = dest
        self.bundled = {}
        self.entry_points = {}

    def _bundle_callback(self, req, sdist):
        sdist._name, sdist._version = req.name, req.version
        self.bundled[sdist.name] = sdist

    def _fill_metadata(self):
        content = self.EGG_FILES['spec/depend']
        req_version = self.req.version
        try:
            if req_version is None:
                req_version = self.bundled[self.req.name].version
        except KeyError:
            pass
        if req_version is None:
            req_version = highest_version(self.req)

        self.EGG_FILES['spec/depend'] = content.format(
            req=self.req.name,
            req_version=req_version,
            arch=platform.machine(),
            platform=sys.platform,
            python_version='.'.join(map(str, sys.version_info[:2])),
            packages=',\n  '.join('{0.name} {0.version}'.format(dist) for dist in self.bundled.values())
        )

    def _safe_readlines(self, dist, filename):
        try:
            return dist.file(filename)
        except KeyError:
            return {}

    def _mk_egg_info(self):
        ## This function should return the EGG-INFO path

        logger.info('Generating EGG-INFO...')
        with TempDir(dont_remove=True) as tempdir:
            egg_info = os.path.join(tempdir, 'EGG-INFO')
            os.mkdir(egg_info)
            self._fill_metadata()
            for mfile, data in self.EGG_FILES.iteritems():
                deps = dict((name, self._safe_readlines(dist, mfile)) for name, dist in self.bundled.iteritems())
                if data == self.EMPTY:
                    content = ''
                elif data == self.INI:
                    ini_file = {}
                    for dep, content in deps.iteritems():
                        for section, options in content.iteritems():
                            if section in ini_file:
                                ini_file[section].update(options)
                            else:
                                ini_file[section] = options
                    result = []
                    for section in sorted(ini_file.iterkeys()):
                        result.append('[{0}]'.format(section))
                        for option, value in ini_file[section].iteritems():
                            result.append('{0} = {1}'.format(option, value))
                        result.append('\n')
                    content = '\n'.join(result)
                elif data in (self.CAT, self.SCAT):
                    lines = []
                    for dep, content in deps.iteritems():
                        lines.extend(content)
                    if data == self.SCAT:
                        lines.sort()
                    content = '\n'.join(lines)
                elif data == self.MERGE:
                    d = set()
                    for dep, content in deps.iteritems():
                        d.update(content)
                    content = '\n'.join(sorted(d))
                elif data == self.REQ:
                    content = '\n'.join('{0}: {1}'.format(opt, val) \
                        for opt, val in self._safe_readlines(self.bundled[self.req.name], mfile).iteritems())
                else:
                    content = data

                if '/' in mfile:
                    # Make it platform-indipendent
                    parts = mfile.split('/')
                    mfile = os.path.join(*mfile.split('/'))
                    os.makedirs(os.path.join(egg_info, *parts[:-1]))
                with open(os.path.join(egg_info, mfile), 'w') as f:
                    # FIXME: this is a bit ugly
                    if mfile == 'entry_points.txt':
                        try:
                            raw = content.split('[console_scripts]')[1].split('[', 1)[0].split('\n')
                        except IndexError:
                            raw = []
                        for line in raw:
                            line = line.strip()
                            if not line:
                                continue
                            cmd, code = (x.strip() for x in line.split('='))
                            self.entry_points[cmd] = code
                    f.write(content)

            return egg_info

    def gen_pack(self, exclude=[], use_develop=False):
        with TempDir() as tempdir:
            logger.info('Generating the bundle...')
            b = Bundler([self.req], self.bundle_name, exclude=exclude, dest=tempdir, \
                callback=self._bundle_callback, use_develop=use_develop)
            b.bundle(include_manifest=False, build_dir=False, add_func=self._mk_egg_info)

            bundle = os.path.join(b.destination, b.bundle_name)
            pack = os.path.join(tempdir, self.pack_name)
            eggname = self.req.name + '.egg'
            folder_name = '{0.name}-{0.version}'.format(self.bundled[self.req.name])
            with ZipFile(pack, mode='w') as z:
                z.write(bundle, '/'.join([folder_name, eggname]))
                # write executable files
                for command_name, code in self.entry_points.iteritems():
                    z.writestr('/'.join([folder_name, 'run_%s.py'%command_name]),
                        _gen_executable(eggname, code))
            dest = os.path.join(self.dest, self.pack_name)
            if os.path.exists(dest):
                os.remove(dest)
            shutil.move(pack, self.dest)
